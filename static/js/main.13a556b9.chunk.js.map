{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","CommonValues.ts","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","CommonValues","VALIDATE_URL_REGEX","TextField","name","value","label","required","onChange","useState","Math","random","toString","slice","id","touched","setToched","hasError","isUrlValid","test","htmlFor","classNames","type","placeholder","event","onBlur","initialFormState","NewMovie","onAdd","count","setCount","formState","setFormState","areAllInputsValid","areUrlsValid","isFormValid","handleFormChange","e","state","target","onSubmit","preventDefault","prevCount","disabled","App","moviesFromServer","setMovies","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.13a556b9.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","export const CommonValues = {\n  /* eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }] */\n  VALIDATE_URL_REGEX:\n    /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/,\n};\n","import classNames from 'classnames';\nimport { useState, ChangeEvent } from 'react';\nimport { CommonValues } from '../../CommonValues';\n\ntype Props = {\n  name: string;\n  value: string;\n  label?: string;\n  required?: boolean;\n  onChange?: (e: ChangeEvent) => void;\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n\n  const isUrlValid\n    = touched\n    && !CommonValues.VALIDATE_URL_REGEX.test(value)\n    && (name === 'imgUrl' || name === 'imdbUrl');\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          name={name}\n          value={value}\n          onChange={(event) => onChange(event)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && <p className=\"help is-danger\">{`${label} is required`}</p>}\n      {isUrlValid && (\n        <p className=\"help is-danger\">{`${label} is not valid`}</p>\n      )}\n    </div>\n  );\n};\n","import { ChangeEvent, useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\nimport { CommonValues } from '../../CommonValues';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nconst initialFormState = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [formState, setFormState] = useState(initialFormState);\n\n  const {\n    title, description, imgUrl, imdbUrl, imdbId,\n  } = formState;\n\n  const areAllInputsValid = !!title && !!imgUrl && !!imdbUrl && !!imdbId;\n\n  const areUrlsValid\n    = CommonValues.VALIDATE_URL_REGEX.test(imgUrl)\n    && CommonValues.VALIDATE_URL_REGEX.test(imdbUrl);\n\n  let isFormValid = false;\n\n  if (areAllInputsValid && areUrlsValid) {\n    isFormValid = true;\n  } else {\n    isFormValid = false;\n  }\n\n  const handleFormChange = (e: ChangeEvent) => {\n    setFormState((state) => ({\n      ...state,\n      [(e.target as HTMLInputElement).name]: (e.target as HTMLInputElement)\n        .value,\n    }));\n  };\n\n  const handleFormSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    const newMovie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    onAdd(newMovie);\n\n    setCount((prevCount) => prevCount + 1);\n    setFormState(initialFormState);\n  };\n\n  return (\n    <form className=\"NewMovie\" key={count} onSubmit={handleFormSubmit}>\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={handleFormChange}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={handleFormChange}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={handleFormChange}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={handleFormChange}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={handleFormChange}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isFormValid}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport moviesFromServer from './api/movies.json';\n\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const handleMovieAdding = (movie: Movie) => {\n    setMovies((prevMovies) => [...prevMovies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={handleMovieAdding} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}